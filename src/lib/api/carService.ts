// @src/lib/api/carService.ts
import { fetchWithAuth } from "@src/utils/fetchWithAuth";
import { apiUrlHelper } from "../helpers/getApiUrl";

const baseUrl = apiUrlHelper();

type ListParams = { page?: number; per_page?: number; search?: string; region?: string };

const qs = (params?: ListParams) => {
    const sp = new URLSearchParams();
    if (params?.page != null) sp.set("page", String(params.page));
    if (params?.per_page != null) sp.set("per_page", String(params.per_page));
    if (params?.search) sp.set("search", params.search);
    if (params?.region) sp.set("region", params.region);
    const s = sp.toString();
    return s ? `?${s}` : "";
};

export const getAllCars = async (params?: ListParams) => {
    const url = `${baseUrl}/cars${qs(params)}`;
    const response = await fetchWithAuth(url, { cache: "no-store" }); // üëà —Ç—É—Ç
    if (!response.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω");
    return response.json();
};

export const getCarsCategory = async (categoryCar: string, params?: ListParams) => {
    const url = `${baseUrl}/cars?category=${encodeURIComponent(categoryCar)}${qs(params).replace("?", "&")}`;
    const response = await fetchWithAuth(url, { cache: "no-store" }); // üëà –∏ —Ç—É—Ç
    if (!response.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω");
    return response.json();
};

// üîπ GET /cars/my ‚Äî –º–æ–∏ –º–∞—à–∏–Ω—ã
export const getMyCars = async () => {
    const response = await fetchWithAuth(`${baseUrl}/my_cars`);
    if (!response.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∏ –º–∞—à–∏–Ω—ã");
    return response.json();
};

// üîπ GET /cars/:id ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–∞—à–∏–Ω—É
export const getCarById = async (id: string | number) => {
    const response = await fetchWithAuth(`${baseUrl}/cars/${id}`);
    if (!response.ok) throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—à–∏–Ω—É —Å id=${id}`);

    const car = await response.json();
    return car;
};

// üîπ POST /cars ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∞—à–∏–Ω—É
export const createCar = async (formData: FormData) => {
    const response = await fetchWithAuth(`${baseUrl}/cars`, {
        method: "POST",
        body: formData,
    });

    if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ: ${errorText}`);
    }

    return response.json();
};

// üîπ PATCH /cars/:id ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –º–∞—à–∏–Ω—É
// @src/lib/api/carService.ts
export const updateCar = async (id: string | number, formData: FormData) => {
    const response = await fetchWithAuth(`${baseUrl}/cars/${id}`, {
        method: "PATCH",
        body: formData,
    });

    if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ: ${errorText}`);
    }
    return response.json();
};

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∞–≤—Ç–æ (DELETE /company_logos/:id)
export const deletePhotoCar = async (logoId: number): Promise<void> => {
    const token = getAccessToken();
    const response = await fetch(`${baseUrl}/car_images/${logoId}`, {
        method: "DELETE",
        headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
        },
    });

    if (!response.ok) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ");
    }
};
// üîπ GET /cars ‚Äî –ö–æ–ª-–≤–ª –≤—Å–µ—á –º–∞—à–∏–Ω
export const getCountAllCars = async () => {
    const response = await fetchWithAuth(`${baseUrl}/cars/total_count`);
    if (!response.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–∏—Ñ—Ä—É –∫–æ–ª-–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π");
    return response.json();
};

// üîπ DELETE /cars/:id ‚Äî —É–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É —Ü–µ–ª–∏–∫–æ–º
export const deleteCar = async (id: number | string): Promise<void> => {
    const response = await fetchWithAuth(`${baseUrl}/cars/${id}`, {
        method: "DELETE",
    });

    if (!response.ok) {
        let msg = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ";
        try {
            const text = await response.text();
            if (text) msg = text;
        } catch {}
        throw new Error(msg);
    }
};
